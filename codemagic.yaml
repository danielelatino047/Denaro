workflows:
  # Debug APK Build - Vollständig überarbeitete Konfiguration
  debug-apk:
    name: Debug APK Build (Expo SDK 53)
    max_build_duration: 120
    instance_type: mac_mini_m2
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'main'
          include: true
        - pattern: 'develop'
          include: true
    environment:
      vars:
        PACKAGE_NAME: "com.arbitrageswap.ai"
        NODE_ENV: "development"
        EXPO_PUBLIC_BUNDLE_IDENTIFIER: "com.arbitrageswap.ai"
      node: 20.18.0
      java: 17
      xcode: latest
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - node_modules
        - $HOME/.npm
        - $HOME/.expo
        - $HOME/.yarn
    scripts:
      - name: Environment Setup and Verification
        script: |
          echo "=== Environment Verification ==="
          node --version
          npm --version
          java -version
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "PATH: $PATH"
          
          # Verify Android SDK
          if [ -z "$ANDROID_SDK_ROOT" ]; then
            echo "ERROR: ANDROID_SDK_ROOT not set!"
            exit 1
          fi
          
          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            echo "ERROR: Android SDK directory not found at $ANDROID_SDK_ROOT"
            exit 1
          fi
          
          echo "Android SDK found at: $ANDROID_SDK_ROOT"
          ls -la "$ANDROID_SDK_ROOT" || true
          
      - name: Clean Installation
        script: |
          echo "=== Clean Installation ==="
          # Remove all caches and build artifacts
          rm -rf node_modules
          rm -rf package-lock.json
          rm -rf yarn.lock
          rm -rf .expo
          rm -rf android
          rm -rf ios
          
          # Clear npm cache
          npm cache clean --force
          
          echo "Cleanup completed"
          
      - name: Install Dependencies
        script: |
          echo "=== Installing Dependencies ==="
          
          # Fix React version conflicts first
          echo "Fixing React version conflicts..."
          npm install react@18.3.1 react-dom@18.3.1 --save --legacy-peer-deps
          
          # Fix other critical version conflicts
          npm install @expo/config-plugins@~8.0.8 --save --legacy-peer-deps
          npm install @expo/prebuild-config@~8.0.8 --save --legacy-peer-deps
          npm install expo-router@~4.0.9 --save --legacy-peer-deps
          npm install react-native@0.76.3 --save --legacy-peer-deps
          npm install lucide-react-native@0.460.0 --save --legacy-peer-deps
          
          # Install remaining dependencies with conflict resolution
          npm install --legacy-peer-deps --no-optional --force
          
          # Force resolve any remaining conflicts
          npm audit fix --force || echo "Audit fix completed with warnings"
          
          # Verify critical packages
          echo "Verifying package installation:"
          npm list expo || echo "Expo package check failed"
          npm list expo-router || echo "Expo Router package check failed"
          npm list react || echo "React package check failed"
          
          echo "Dependencies installed successfully"
          
      - name: Install and Configure Expo CLI
        script: |
          echo "=== Installing Expo CLI ==="
          
          # Remove any existing Expo CLI installations
          npm uninstall -g @expo/cli expo-cli || true
          
          # Install latest stable Expo CLI
          npm install -g @expo/cli@latest --force
          
          # Verify installation
          which expo
          expo --version
          
          # Test basic expo commands
          expo doctor || echo "Expo doctor completed with warnings"
          
      - name: Configure Expo Project
        script: |
          echo "=== Configuring Expo Project ==="
          
          # Verify app.json exists and is valid
          if [ ! -f "app.json" ]; then
            echo "ERROR: app.json not found!"
            exit 1
          fi
          
          echo "Current app.json content:"
          cat app.json
          
          # Verify package.json
          if [ ! -f "package.json" ]; then
            echo "ERROR: package.json not found!"
            exit 1
          fi
          
          echo "Package.json main entry:"
          grep '"main"' package.json || echo "No main entry found"
          
      - name: Generate Android Project (Prebuild)
        script: |
          echo "=== Generating Android Project ==="
          
          # Set environment variables for prebuild
          export EXPO_NO_TELEMETRY=1
          export EXPO_NO_CACHE=1
          export NODE_OPTIONS="--max-old-space-size=8192"
          
          # Ensure we have the correct config plugins
          echo "Installing required prebuild dependencies..."
          npm install @expo/config-plugins@~8.0.8 @expo/prebuild-config@~8.0.8 --save-dev --legacy-peer-deps
          
          # Clear any existing android directory
          rm -rf android
          
          # Run prebuild with detailed logging and error handling
          echo "Running expo prebuild..."
          expo prebuild --platform android --clean --no-install --verbose 2>&1 | tee prebuild.log || {
            echo "Prebuild failed, analyzing error..."
            
            # Show the last 50 lines of the log for debugging
            echo "Last 50 lines of prebuild log:"
            tail -50 prebuild.log
            
            # Try to fix common dependency issues
            echo "Attempting to fix dependency conflicts..."
            npm install --legacy-peer-deps --force
            
            # Try prebuild again with different options
            echo "Retrying prebuild with npm install..."
            expo prebuild --platform android --clean --verbose || {
              echo "Second prebuild attempt failed, trying manual dependency resolution..."
              
              # Manual dependency resolution
              npm install react@18.3.1 react-dom@18.3.1 --force
              npm install @react-native/gradle-plugin --save-dev --force
              
              # Final attempt
              expo prebuild --platform android --clean --verbose
            }
          }
          
          # Verify android directory was created
          if [ ! -d "android" ]; then
            echo "ERROR: Android directory not created after prebuild!"
            echo "Current directory contents:"
            ls -la
            echo "Checking prebuild log for errors:"
            cat prebuild.log | grep -i error || echo "No explicit errors found in log"
            exit 1
          fi
          
          echo "Android project generated successfully!"
          echo "Android directory structure:"
          ls -la android/
          
          # Verify essential Android files
          if [ ! -f "android/gradlew" ]; then
            echo "ERROR: Gradle wrapper not found!"
            echo "Android app directory contents:"
            ls -la android/app/ || echo "No app directory"
            exit 1
          fi
          
          if [ ! -f "android/app/build.gradle" ]; then
            echo "ERROR: App build.gradle not found!"
            echo "Available gradle files:"
            find android -name "*.gradle" -type f || echo "No gradle files found"
            exit 1
          fi
          
          # Fix any potential gradle issues
          echo "Checking and fixing gradle configuration..."
          cd android
          
          # Ensure gradle wrapper has correct permissions
          chmod +x gradlew
          
          # Check gradle version compatibility
          echo "Gradle wrapper version:"
          ./gradlew --version || echo "Gradle version check failed"
          
          cd ..
          
      - name: Configure Android Build
        script: |
          echo "=== Configuring Android Build ==="
          
          # Create local.properties with correct SDK paths
          echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
          if [ -n "$ANDROID_NDK_ROOT" ]; then
            echo "ndk.dir=$ANDROID_NDK_ROOT" >> android/local.properties
          fi
          
          echo "Created local.properties:"
          cat android/local.properties
          
          # Make gradlew executable
          chmod +x android/gradlew
          
          # Test gradle wrapper
          cd android
          echo "Testing Gradle wrapper..."
          ./gradlew --version || {
            echo "Gradle wrapper test failed!"
            exit 1
          }
          
          echo "Gradle configuration successful"
          
      - name: Build Debug APK
        script: |
          echo "=== Building Debug APK ==="
          cd android
          
          # Set Java options for better memory management
          export JAVA_OPTS="-Xmx4g -XX:MaxMetaspaceSize=1g"
          export GRADLE_OPTS="-Xmx4g -XX:MaxMetaspaceSize=1g -Dorg.gradle.daemon=false"
          
          # Clean any previous builds
          echo "Cleaning previous builds..."
          ./gradlew clean --stacktrace --info --no-daemon
          
          # Check Android SDK and build tools
          echo "Verifying Android SDK setup..."
          ls -la "$ANDROID_SDK_ROOT/build-tools/" || echo "Build tools directory not found"
          ls -la "$ANDROID_SDK_ROOT/platforms/" || echo "Platforms directory not found"
          
          # Build debug APK with detailed logging and error handling
          echo "Building debug APK..."
          ./gradlew assembleDebug --stacktrace --info --no-daemon --max-workers=2 2>&1 | tee ../build.log || {
            echo "Build failed! Analyzing error..."
            
            # Show build log for debugging
            echo "Last 100 lines of build log:"
            tail -100 ../build.log
            
            # Check for common issues
            echo "Checking for common build issues..."
            
            # Check if we have build tools
            if [ ! -d "$ANDROID_SDK_ROOT/build-tools/" ]; then
              echo "ERROR: Android build tools not found!"
              exit 1
            fi
            
            # Check gradle daemon status
            ./gradlew --status || true
            
            # Kill any existing gradle daemons
            ./gradlew --stop || true
            
            # Try building again with different settings
            echo "Retrying build with conservative settings..."
            ./gradlew assembleDebug --stacktrace --info --no-daemon --max-workers=1 --no-parallel || {
              echo "Second build attempt failed!"
              echo "Checking for specific error patterns..."
              grep -i "error" ../build.log | tail -10 || echo "No specific errors found"
              exit 1
            }
          }
          
          # Verify APK was created
          echo "Checking for generated APK..."
          find app/build/outputs -name "*.apk" -type f 2>/dev/null || echo "No APK files found yet"
          
          # Check multiple possible locations for the APK
          APK_LOCATIONS=(
            "app/build/outputs/apk/debug/app-debug.apk"
            "app/build/outputs/apk/debug/app-universal-debug.apk"
            "app/build/outputs/apk/debug/app-arm64-v8a-debug.apk"
            "app/build/outputs/apk/debug/app-armeabi-v7a-debug.apk"
          )
          
          APK_FOUND=""
          for apk_path in "${APK_LOCATIONS[@]}"; do
            if [ -f "$apk_path" ]; then
              APK_FOUND="$apk_path"
              echo "Found APK at: $apk_path"
              break
            fi
          done
          
          if [ -z "$APK_FOUND" ]; then
            echo "ERROR: No debug APK found in expected locations!"
            echo "Build outputs directory structure:"
            find app/build -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
            echo "Complete build outputs:"
            find app/build/outputs -type f 2>/dev/null || echo "No build outputs found"
            exit 1
          fi
          
          echo "APK build successful!"
          ls -la app/build/outputs/apk/debug/ 2>/dev/null || echo "Debug directory listing failed"
          
          # Get APK info
          APK_SIZE=$(stat -f%z "$APK_FOUND" 2>/dev/null || stat -c%s "$APK_FOUND" 2>/dev/null || echo "unknown")
          echo "APK size: $APK_SIZE bytes"
          echo "APK location: $APK_FOUND"
          
      - name: Prepare Artifacts
        script: |
          echo "=== Preparing Artifacts ==="
          
          # Create artifacts directory
          mkdir -p $CM_BUILD_DIR/artifacts
          
          # Find the actual APK file
          cd android
          APK_FILES=($(find app/build/outputs -name "*.apk" -type f 2>/dev/null))
          
          if [ ${#APK_FILES[@]} -eq 0 ]; then
            echo "ERROR: No APK files found for artifacts!"
            echo "Searching entire build directory:"
            find app/build -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
            exit 1
          fi
          
          echo "Found ${#APK_FILES[@]} APK file(s):"
          for apk in "${APK_FILES[@]}"; do
            echo "  - $apk"
          done
          
          # Copy all found APKs with descriptive names
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          for i in "${!APK_FILES[@]}"; do
            APK_SOURCE="${APK_FILES[$i]}"
            APK_BASENAME=$(basename "$APK_SOURCE" .apk)
            
            # Copy with timestamp
            cp "$APK_SOURCE" "$CM_BUILD_DIR/artifacts/arbitrageswap-ai-$APK_BASENAME-$TIMESTAMP.apk"
            
            # Copy with simple name for easy access
            cp "$APK_SOURCE" "$CM_BUILD_DIR/arbitrageswap-ai-$APK_BASENAME.apk"
            
            # Copy main APK to root for artifacts pattern matching
            if [[ "$APK_BASENAME" == *"debug"* ]] || [ $i -eq 0 ]; then
              cp "$APK_SOURCE" "$CM_BUILD_DIR/arbitrageswap-ai-debug-latest.apk"
            fi
          done
          
          cd ..
          
          echo "Artifacts prepared:"
          ls -la $CM_BUILD_DIR/*.apk 2>/dev/null || echo "No APK files in build dir"
          ls -la $CM_BUILD_DIR/artifacts/ 2>/dev/null || echo "No artifacts directory"
          
          # Verify file sizes
          for apk in $CM_BUILD_DIR/*.apk $CM_BUILD_DIR/artifacts/*.apk; do
            if [ -f "$apk" ]; then
              SIZE=$(stat -f%z "$apk" 2>/dev/null || stat -c%s "$apk" 2>/dev/null || echo "unknown")
              echo "$(basename "$apk"): $SIZE bytes"
            fi
          done
          
    artifacts:
      - "*.apk"
      - "artifacts/*.apk"
      - android/app/build/outputs/**/*.apk
      - android/app/build/outputs/**/mapping.txt
      - android/app/build/reports/**/*
    publishing:
      email:
        recipients:
          - daniele.latino047@gmail.com
        notify:
          success: true
          failure: true

  # EAS Build Alternative (falls Prebuild nicht funktioniert)
  eas-debug-apk:
    name: EAS Debug APK Build
    max_build_duration: 90
    instance_type: mac_mini_m2
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'eas-build'
          include: true
    environment:
      vars:
        EXPO_TOKEN: $EXPO_TOKEN
        PACKAGE_NAME: "com.arbitrageswap.ai"
      node: 20.18.0
      java: 17
    scripts:
      - name: Install Dependencies
        script: |
          echo "=== Installing Dependencies ==="
          npm install --legacy-peer-deps
          npm install -g @expo/cli eas-cli
          
      - name: EAS Build
        script: |
          echo "=== EAS Build ==="
          
          # Check if EXPO_TOKEN is set
          if [ -z "$EXPO_TOKEN" ]; then
            echo "WARNING: EXPO_TOKEN not set, trying without authentication"
          else
            echo "EXPO_TOKEN is configured"
          fi
          
          # Build with EAS
          eas build --platform android --profile development --local --output $CM_BUILD_DIR/arbitrageswap-ai-eas-debug.apk
          
    artifacts:
      - "*.apk"
