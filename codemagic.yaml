workflows:
  # Debug APK Build - Robuste Konfiguration fÃ¼r Expo SDK 53
  debug-apk:
    name: Debug APK Build
    max_build_duration: 90
    instance_type: mac_mini_m2
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'main'
          include: true
        - pattern: 'develop'
          include: true
    environment:
      vars:
        PACKAGE_NAME: "com.arbitrageswap.ai"
        EXPO_CLI_VERSION: "6.3.10"
        NODE_ENV: "development"
      node: 20.18.0
      java: 17
      xcode: latest
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - node_modules
        - $HOME/.npm
        - $HOME/.expo
    scripts:
      - name: Verify Environment
        script: |
          echo "=== Environment Check ==="
          node --version
          npm --version
          java -version
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "PATH: $PATH"
          
      - name: Clean and Install Node Dependencies
        script: |
          echo "=== Installing Node Dependencies ==="
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install --legacy-peer-deps --verbose
          
      - name: Install Expo CLI with Verification
        script: |
          echo "=== Installing Expo CLI ==="
          npm uninstall -g @expo/cli expo-cli || true
          npm install -g @expo/cli@$EXPO_CLI_VERSION --force
          
          # Verify installation
          which expo || echo "Expo not in PATH"
          ls -la $(npm root -g)/@expo/cli/bin/ || echo "Expo CLI bin not found"
          
          # Add to PATH if needed
          export PATH="$(npm root -g)/@expo/cli/bin:$PATH"
          
          # Test expo command
          expo --version || {
            echo "Expo command failed, trying alternative installation"
            npm install -g expo@latest --force
            expo --version
          }
          
      - name: Clear All Caches
        script: |
          echo "=== Clearing Caches ==="
          rm -rf .expo
          rm -rf android
          rm -rf ios
          expo doctor || true
          
      - name: Generate Android Project
        script: |
          echo "=== Generating Android Project ==="
          expo prebuild --platform android --clean --no-install --verbose
          
          # Verify android directory was created
          if [ ! -d "android" ]; then
            echo "ERROR: Android directory not created!"
            exit 1
          fi
          
          echo "Android project structure:"
          ls -la android/
          
      - name: Setup Android Build Environment
        script: |
          echo "=== Setting up Android Build Environment ==="
          
          # Create local.properties
          echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
          echo "ndk.dir=$ANDROID_NDK_ROOT" >> android/local.properties
          
          # Verify gradle wrapper
          if [ ! -f "android/gradlew" ]; then
            echo "ERROR: Gradle wrapper not found!"
            exit 1
          fi
          
          chmod +x android/gradlew
          
          # Test gradle
          cd android
          ./gradlew --version
          
      - name: Build Debug APK
        script: |
          echo "=== Building Debug APK ==="
          cd android
          
          # Clean previous builds
          ./gradlew clean --stacktrace --info
          
          # Build debug APK
          ./gradlew assembleDebug --stacktrace --info --no-daemon --max-workers=2
          
          # Verify APK was created
          if [ ! -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "ERROR: Debug APK not found!"
            echo "Checking build outputs:"
            find app/build/outputs -name "*.apk" -type f || echo "No APK files found"
            exit 1
          fi
          
          echo "APK successfully created:"
          ls -la app/build/outputs/apk/debug/
          
      - name: Copy APK to Artifacts
        script: |
          echo "=== Copying APK to Artifacts ==="
          
          # Create artifacts directory
          mkdir -p $CM_BUILD_DIR/artifacts
          
          # Copy APK with timestamp
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          cp android/app/build/outputs/apk/debug/app-debug.apk $CM_BUILD_DIR/artifacts/arbitrageswap-ai-debug-$TIMESTAMP.apk
          
          # Also copy with simple name
          cp android/app/build/outputs/apk/debug/app-debug.apk $CM_BUILD_DIR/arbitrageswap-ai-debug.apk
          
          echo "Artifacts created:"
          ls -la $CM_BUILD_DIR/
          ls -la $CM_BUILD_DIR/artifacts/ || true
          
    artifacts:
      - "*.apk"
      - "artifacts/*.apk"
      - android/app/build/outputs/**/*.apk
      - android/app/build/outputs/**/mapping.txt
      - android/app/build/reports/**/*
    publishing:
      email:
        recipients:
          - daniele.latino047@gmail.com
        notify:
          success: true
          failure: true

  # Fallback: Pure Gradle Build (ohne Expo)
  gradle-debug-apk:
    name: Gradle Debug APK (Fallback)
    max_build_duration: 60
    instance_type: mac_mini_m2
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'fallback'
          include: true
    environment:
      vars:
        PACKAGE_NAME: "com.arbitrageswap.ai"
      node: 20.18.0
      java: 17
    scripts:
      - name: Setup React Native Project
        script: |
          echo "=== Setting up React Native Project ==="
          npm install --legacy-peer-deps
          
          # Create basic Android project structure if not exists
          if [ ! -d "android" ]; then
            npx react-native init TempProject --template react-native-template-typescript
            cp -r TempProject/android .
            rm -rf TempProject
          fi
          
      - name: Build with Gradle
        script: |
          echo "=== Building with Gradle ==="
          cd android
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          chmod +x ./gradlew
          ./gradlew assembleDebug --stacktrace --info
          
    artifacts:
      - android/app/build/outputs/**/*.apk
